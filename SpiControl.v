// File: SpiControl.v
// Generated by MyHDL 0.9.0
// Date: Fri Feb 24 17:24:41 2017


`timescale 1ns/10ps

module SpiControl (
   input clock,
	input [31:0] data,
	input dataReady,
	input [15:0] dataTransmitted,
	input reset_n,
	output reg [15:0] bitfield,
	output reg [2:0] spi_register,
	output reg spi_select,
	output reg send_n
);
// Splits the 32-bit data into bitfield chunks
// 
// data -- input data
// dataReady -- signal data is ready for transmission
// send -- toggle the transmission
// bitfield -- which part should be send

reg [1:0] nextField;
reg done;

always @(posedge clock, negedge reset_n) begin: SPICONTROL_SPILOGIC
    if (reset_n == 0) begin
        bitfield <= 0;
        send_n <= 1;
		  done <= 1;
		  spi_register <= 1;
    end
    else begin
		  
        if (dataTransmitted ==1 && done==0) begin // if the data was transmitted and we are not done yet
				case(nextField)
					0: bitfield[7:0] <= data[7:0];
					1: bitfield[7:0] <= data[15:8];
					2: bitfield[7:0] <= data[23:16];
					3: bitfield[7:0] <= data[31:24];
					default: bitfield<=0;
				endcase
            send_n <= 0;
				nextField <= nextField + 1;
				if(nextField == 3) begin
					done <= 1;
					spi_select <= 0;
				end
        end
        else begin // else reset the send_n line
            send_n <= 1;
        end
		  // if there is new data and all data was sent
		  if(dataReady==1 && done==1) begin
				done <= 0;
				spi_select <= 1;
		  end
    end
end

endmodule
