library IEEE;
use ieee.std_logic_1164.all;        
use IEEE.std_logic_signed.all;
use ieee.numeric_std.all;

entity merge is
	Generic (
		constant number_of_sensors  : natural := 30
	);
   port( 
	 clock: in std_logic;	-- clock signal
	 counter: in std_logic_vector(31 downto 0);	-- a counter
	 sensor_empty: 	in std_logic_vector(number_of_sensors-1 downto 0); -- a vector containing the status of each sensors FIFO
 	 sensor_selector: out std_logic_vector(4 downto 0);	-- mux slector
	 sensor_read: 	out std_logic_vector(number_of_sensors-1 downto 0)); -- a vector containing the read enable of each sensors FIFO
end sensor_mux;
 
architecture Behavioral of sensor_mux is
begin   process(clock, counter)
	variable sensor: integer;
   begin
		if rising_edge(clock) then
			sensor := conv_integer(counter) mod number_of_sensors;
			sensor_selector <= std_logic_vector(to_unsigned(sensor, 32));
			sensor_read <= (others => '0');
			if(sensor_empty(sensor) /= '0') then
				sensor_read(sensor) <= '1';
			end if;
		end if;
   end process;
end Behavioral;